[
  {
    "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/babel.config.js",
    "messages":[],
    "errorCount":0,
    "warningCount":0,
    "fixableErrorCount":0,
    "fixableWarningCount":0,
    "usedDeprecatedRules":[
      {
        "ruleId":"lines-around-directive",
        "replacedBy":["padding-line-between-statements"]
      },
      {
        "ruleId":"no-spaced-func",
        "replacedBy":["func-call-spacing"]
      },
      {
        "ruleId":"global-require",
        "replacedBy":[]
      },
      {
        "ruleId":"no-buffer-constructor",
        "replacedBy":[]
      },
      {
        "ruleId":"no-new-require",
        "replacedBy":[]
      },
      {
        "ruleId":"no-path-concat",
        "replacedBy":[]
      }
    ]
  },
  {
    "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/auxiliaryFunctions.js",
    "messages":[],
    "errorCount":0,
    "warningCount":0,
    "fixableErrorCount":0,
    "fixableWarningCount":0,
    "usedDeprecatedRules":[
      {
       "ruleId":"lines-around-directive",
       "replacedBy":["padding-line-between-statements"]
      },
      {
        "ruleId":"no-spaced-func",
        "replacedBy":["func-call-spacing"]
      },
      {
        "ruleId":"global-require",
        "replacedBy":[]
      },
      {
        "ruleId":"no-buffer-constructor",
        "replacedBy":[]
      },
      {
        "ruleId":"no-new-require",
        "replacedBy":[]
      },
      {
        "ruleId":"no-path-concat",
        "replacedBy":[]
      }
    ]
  },
  {
      "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/bin/gendiff.js",
      "messages":[],
      "errorCount":0,
      "warningCount":0,
      "fixableErrorCount":0,
      "fixableWarningCount":0,
      "usedDeprecatedRules":[
        {
          "ruleId":"lines-around-directive",
          "replacedBy":["padding-line-between-statements"]
        },
        {
          "ruleId":"no-spaced-func",
          "replacedBy":["func-call-spacing"]
        },
        {
          "ruleId":"global-require",
          "replacedBy":[]
        },
        {
          "ruleId":"no-buffer-constructor",
          "replacedBy":[]
        },
        {
          "ruleId":"no-new-require",
          "replacedBy":[]
        },
        {
          "ruleId":"no-path-concat",
          "replacedBy":[]
        }
  ]},
  {
    "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/formaters/index.js",
    "messages":[],
    "errorCount":0,
    "warningCount":0,
    "fixableErrorCount":0,
    "fixableWarningCount":0,
    "usedDeprecatedRules":[
      {
        "ruleId":"lines-around-directive",
        "replacedBy":["padding-line-between-statements"]
      },
      {
        "ruleId":"no-spaced-func",
        "replacedBy":["func-call-spacing"]
      },
      {
        "ruleId":"global-require",
        "replacedBy":[]
      },
      {
        "ruleId":"no-buffer-constructor",
        "replacedBy":[]
      },
      {
        "ruleId":"no-new-require","replacedBy":[]
      },
      {
        "ruleId":"no-path-concat",
        "replacedBy":[]
      }]
  },
  {
    "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/formaters/plain.js",
    "messages":[
      {
        "ruleId":"no-unused-vars",
        "severity":2,
        "message":"'toStringPlainStyle' is assigned a value but never used.",
        "line":61,
        "column":10,
        "nodeType":"Identifier",
        "messageId":"unusedVar",
        "endLine":61,"endColumn":28
      }],
      "errorCount":1,
      "warningCount":0,
      "fixableErrorCount":0,
      "fixableWarningCount":0,
      "source":"import { isObject, isString } from '../auxiliaryFunctions';\n\nconst trimPlusAndMinus = (string) => string.replace('+ ', '').replace('- ', '');\n\nconst makeNewPath = (path, name) => `${path}.${name}`.replace('.', '');\n\nconst toStringPlainStyle = (object, path = '', acc = '', keyNum = 0) => {\n  const keys = Object.keys(object);\n  const
key = keys[keyNum];\n  const nextKey = keys[keyNum + 1];\n\n  if (keyNum > keys.length - 1) {\n    const newAcc = acc;\n    return newAcc;\n  }\n\n  if (nextKey !== undefined) {\n    if (key[0] === '+' && nextKey[0] === '-') {\n      const cleanName = trimPlusAndMinus(key);\n      const newPath = makeNewPath(path, cleanName);\n\n
   const newValue = isString(object[nextKey]) ? `'${object[nextKey]}'` : object[nextKey];\n      const mostNewValue = isObject(newValue) ? '[complex value]' : newValue;\n\n      const oldValue = isString(object[key]) ? `'${object[key]}'` : object[key];\n      const newOldValue = isObject(oldValue) ? '[complex value]' : oldValue;\n\n      const newAcc = `${acc}\\nProperty '${newPath}' was changed from ${newOldValue} to ${mostNewValue}`;\n      return toStringPlainStyle(object, path, newAcc, keyNum + 2);\n    }\n  }\n\n  if (key[0] === '+' && isObject(object[key])) {\n    const cleanName = trimPlusAndMinus(key);\n    const newPath = makeNewPath(path, cleanName);\n    const newAcc = `${acc}\\nProperty '${newPath}' was added with value: [complex value]`;\n    return toStringPlainStyle(object, path, newAcc, keyNum + 1);\n  }\n\n  if (key[0] === '+') {\n    const cleanName = trimPlusAndMinus(key);\n    const newPath = makeNewPath(path, cleanName);\n    const newValue = isString(object[key]) ?
`'${object[key]}'` : object[key];\n    const newAcc = `${acc}\\nProperty '${newPath}' was added with value: ${newValue}`;\n    return toStringPlainStyle(object, path,
newAcc, keyNum + 1);\n  }\n\n  if (key[0] === '-') {\n    const cleanName = trimPlusAndMinus(key);\n    const newPath = makeNewPath(path, cleanName);\n    const newAcc = `${acc}\\nProperty '${newPath}' was deleted`;\n    return toStringPlainStyle(object, path, newAcc, keyNum + 1);\n  }\n\n  if (isObject(object[key])) {\n    const newPath = `${path}.${key}`;\n    const newAcc = `${acc.trimLeft()}${toStringPlainStyle(object[key], newPath)}`;\n    return toStringPlainStyle(object, path, newAcc, keyNum + 1);\n  }\n\n  return toStringPlainStyle(object, path, acc, keyNum + 1);\n};\n\n// export default toStringPlainStyle;\n",
      "usedDeprecatedRules":[
        {
          "ruleId":"lines-around-directive",
          "replacedBy":["padding-line-between-statements"]
        },
        {
          "ruleId":"no-spaced-func",
          "replacedBy":["func-call-spacing"]
        },
        {
          "ruleId":"global-require",
          "replacedBy":[]
        },
        {
          "ruleId":"no-buffer-constructor","replacedBy":[]
        },
        {
          "ruleId":"no-new-require",
          "replacedBy":[]
        },
        {
          "ruleId":"no-path-concat",
          "replacedBy":[]
        }]
        },
        {
          "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/formaters/stylish.js",
          "messages":[],
          "errorCount":0,
          "warningCount":0,
          "fixableErrorCount":0,
          "fixableWarningCount":0,
          "usedDeprecatedRules":[
            {
              "ruleId":"lines-around-directive",
              "replacedBy":["padding-line-between-statements"]
            },
            {
              "ruleId":"no-spaced-func",
              "replacedBy":["func-call-spacing"]
            },
            {
              "ruleId":"global-require",
              "replacedBy":[]
            },
            {
              "ruleId":"no-buffer-constructor",
              "replacedBy":[]
            },
            {
              "ruleId":"no-new-require",
              "replacedBy":[]
            },
            {
              "ruleId":"no-path-concat",
              "replacedBy":[]
            }]
            },
            {
              "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/genDiff.js",
              "messages":[],
              "errorCount":0,
              "warningCount":0,
              "fixableErrorCount":0,"
              fixableWarningCount":0,
              "usedDeprecatedRules":[
                {
                  "ruleId":"lines-around-directive",
                  "replacedBy":["padding-line-between-statements"]
                },
                {
                  "ruleId":"no-spaced-func",
                  "replacedBy":["func-call-spacing"]
                },
                {
                  "ruleId":"global-require",
                  "replacedBy":[]
                },
                {
                  "ruleId":"no-buffer-constructor",
                  "replacedBy":[]
                },
                {
                  "ruleId":"no-new-require",
                  "replacedBy":[]
                },
                {
                  "ruleId":"no-path-concat",
                  "replacedBy":[]
                }
                ]
                },
                {
                  "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/index.js",
                  "messages":[],
                  "errorCount":0,
                  "warningCount":0,
                  "fixableErrorCount":0,
                  "fixableWarningCount":0,
                  "usedDeprecatedRules":[
                    {
                      "ruleId":"lines-around-directive",
                      "replacedBy":["padding-line-between-statements"]
                    },
                    {
                      "ruleId":"no-spaced-func",
                      "replacedBy":["func-call-spacing"]
                    },
                    {
                      "ruleId":"global-require",
                      "replacedBy":[]
                    },
                    {
                      "ruleId":"no-buffer-constructor",
                      "replacedBy":[]
                    },
                    {
                      "ruleId":"no-new-require",
                      "replacedBy":[]
                    },
                    {
                      "ruleId":"no-path-concat",
                      "replacedBy":[]
                    }]
                    },
                    {
                      "filePath":"/mnt/c/Users/МАКСИМ/Hexlet-Learning/GIT/hexletProjects/frontend-project-lvl2/src/parsers.js",
                      "messages":[],
                      "errorCount":0,
                      "warningCount":0,
                      "fixableErrorCount":0,
                      "fixableWarningCount":0,
                      "usedDeprecatedRules":[
                        {
                          "ruleId":"lines-around-directive",
                          "replacedBy":["padding-line-between-statements"]
                        },
                        {
                          "ruleId":"no-spaced-func",
                          "replacedBy":["func-call-spacing"]
                        },
                        {
                          "ruleId":"global-require",
                          "replacedBy":[]
                        },
                        {
                          "ruleId":"no-buffer-constructor",
                          "replacedBy":[]
                        },
                        {
                          "ruleId":"no-new-require",
                          "replacedBy":[]
                        },
                        {
                          "ruleId":"no-path-concat",
                          "replacedBy":[]
                        }
                        ]
                        }
                      ]